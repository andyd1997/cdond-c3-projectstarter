version: 2.1

commands:
  destroy-environment:
    description: Destroy backend and frontend stacks given a workflow ID.
    steps:
      - run:
          name: Destroy Backend Infrastructure
          when: on_fail
          command: aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy Frontend Infrastructure
          when: on_fail
          command: aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Delete S3 files
          when: on_fail
          command: aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          command: |
            echo "revert migrations begins..."
            SUCCESS=$(curl -H "token: "7933fe63-4687-4fa1-8426-aa25aa1730ec" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == 1));
            then
              echo "roll back migration started"
              cd ~/project/backend
              npm install
              npm run migration:revert
              echo "roll back "
            fi
              echo "revert migrations finish..."


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-build
          command: |
            cd backend
            npm install
            npm run test    
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend-build
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-build
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].{public_ip:PublicIpAddress}" --output text)
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            echo $BACKEND_IP > .circleci/ansible/backend_host.txt
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/.circleci/ansible/backend_host.txt
         
              
  configure-infrastructure:
    docker:
      - image: centos:centos8
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y epel-release
            yum install -y tar gzip ansible
      - attach_workspace:
          name: Attach Workspace
          at: ~/
      
      - add_ssh_keys:
          name: Add ssh keys with fingerprint
          fingerprints:
            - "71:9d:d8:d7:d9:4f:2d:a1:33:fc:c6:1e:59:46:e0:b9"

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

     
            
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          no_output_timeout: 30m
          working_directory: ./backend
          command: |
            npm install
            npm run migrations > migration.log
            export migration_status=$(cat migration.log | grep -c "has been executed successfully")
            tar -zcvf ~/backend.tar.gz .
            ls
      - persist_to_workspace:
          root: ~/
          paths:
            - migration.log
            - backend.tar.gz
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi

  deploy-frontend:
    docker:
      - image: centos:centos8
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y epel-release
            yum install -y tar gzip ansible nodejs npm python3 
      - run:
          name: Install AWS CLI
          command: |
            yum install awscli -y
      - attach_workspace:
          name: Attach Workspace
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].{public_ip:PublicIpAddress}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      #- destroy-environment
      #- revert-migrations
      

  deploy-backend:
    docker:
      - image: centos:centos8
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y epel-release
            yum install -y tar gzip ansible nodejs npm python3
      - add_ssh_keys:
          name: Add ssh keys with fingerprint
          fingerprints:
            - "71:9d:d8:d7:d9:4f:2d:a1:33:fc:c6:1e:59:46:e0:b9"
      - attach_workspace:
          name: Attach Workspace
          at: ~/
      - run:
          name: Deploy backend
          command: |
            echo ENVIRONMENT=production >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            tar -C backend -czvf artifact.tar.gz .
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd ~/project/.circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt deploy-backend.yml
            
      
      
      
  smoke-test:
    docker:
      - image: centos:centos8
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y epel-release
            yum install -y tar gzip nodejs npm curl awscli
      - attach_workspace:
          name: Attach Workspace
          at: ~/           
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=`cat .circleci/ansible/inventory.txt | head -2 | tail -1`
            echo ${BACKEND_IP}
            export URL="http://$BACKEND_IP:3030/api/status"
            echo $URL
            curl $URL
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-eu-west-1.amazonaws.com/#/employees"            
            echo ${URL} 
            curl -s ${URL} | grep "Welcome" 
      #- destroy-environment
      #- revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID > ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
                        
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            
      - attach_workspace:
          at: ~/      
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID:"${OldWorkflowID}"
            
            export CurrentWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo CurrentWorkflowID:"${CurrentWorkflowID}"
            
            echo "udapeople-${OldWorkflowID}"
            echo "udapeople-backend-${OldWorkflowID}"
            echo "udapeople-frontend-${OldWorkflowID}"
            
            if [[ "${CurrentWorkflowID}" != "${OldWorkflowID}" ]]
            then
                echo "i am in"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
             else
                echo "i am out"
            fi       
    
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

      
